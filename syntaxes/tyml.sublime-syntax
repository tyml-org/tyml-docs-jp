%YAML 1.2
---
name: Tyml
file_extensions: [tyml]
scope: source.tyml

# ---------------------------------------------------------------------------
#  Variables  ---------------------------------------------------------------
# ---------------------------------------------------------------------------
variables:
  ident: '[A-Za-z_][A-Za-z0-9_]*'
  number: '\d+'
  range_op: '\\.\\.(?:=|<)?'   # ..  ..=  ..<
  member_key: '(?:\*|[A-Za-z_][A-Za-z0-9_]*)'  # identifier OR wildcard '*'

# ---------------------------------------------------------------------------
#  Contexts  ----------------------------------------------------------------
# ---------------------------------------------------------------------------
contexts:
  # ==== entry ==============================================================
  main:
    - include: skp-line

    # keyword-driven blocks --------------------------------------------------
    - match: '\binterface\b'
      scope: keyword.declaration.interface.tyml
      push: interface-decl

    - match: '\btype\b'
      scope: keyword.declaration.type.tyml
      push: type-decl

    - match: '\benum\b'
      scope: keyword.declaration.enum.tyml
      push: enum-decl

    # setting key (identifier or '*') --------------------------------------
    - match: '{{member_key}}(?=\s*:)'  # wildcard or ident
      scope: variable.other.member.tyml
      push: value-decl

    - include: literals

  # -----------------------------------------------------------------------
  #  Whitespace helpers  ---------------------------------------------------
  # -----------------------------------------------------------------------
  ws-inline:
    - match: '[ \t]+'
      scope: text.whitespace

  ws-line:
    - match: '\s+'
      scope: text.whitespace

  # -----------------------------------------------------------------------
  #  Comments  -------------------------------------------------------------
  # -----------------------------------------------------------------------
  comment-doc:
    - match: '///'
      scope: punctuation.definition.comment.tyml
      push: comment-doc-body

  comment-line:
    - match: '//'
      scope: punctuation.definition.comment.tyml
      push: comment-line-body

  comment-line-body:
    - meta_scope: comment.line.double-slash.tyml
    - match: '\n'
      pop: true

  comment-doc-body:
    - meta_scope: comment.line.documentation.tyml
    - match: '\n'
      pop: true

  skp-inline:
    - include: ws-inline
    - include: comment-doc
    - include: comment-line

  skp-line:
    - include: ws-line
    - include: comment-doc
    - include: comment-line

  # -----------------------------------------------------------------------
  #  interface  ------------------------------------------------------------
  # -----------------------------------------------------------------------
  interface-decl:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.type.interface.tyml
      set: interface-after-name

  interface-after-name:
    - include: skp-inline
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      set: interface-body

  interface-body:
    - meta_scope: meta.block.interface.tyml
    - include: skp-line

    # authed function / function ------------------------------------------
    - match: '\b(?:(authed)\s+)?(function)\b'
      captures:
        1: storage.modifier.security.tyml
        2: keyword.declaration.function.tyml
      push: func-after-keyword

    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  function  -------------------------------------------------------------
  # -----------------------------------------------------------------------
  func-after-keyword:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.function.tyml
      set: func-after-name

  func-after-name:
    - include: skp-inline
    - match: '\('
      scope: punctuation.section.group.begin.parameters.tyml
      set: params

  params:
    - meta_scope: meta.function.parameters.tyml
    - include: skp-inline

    # 「@claim: Type」のように @xxx がキーのケース（型までハイライト）
    - match: '@{{ident}}(?=\s*:)'
      scope: storage.type.annotation.parameter.tyml
      push: annot-param-after-key

    # 「@body user: User」等の将来拡張用（@xxx 単独）
    - match: '@{{ident}}'
      scope: storage.type.annotation.parameter.tyml

    # param name
    - match: '{{ident}}(?=\s*:)'
      scope: variable.parameter.tyml
      push: param-after-name

    - match: ','
      scope: punctuation.separator.parameter.tyml

    - match: '\)'
      scope: punctuation.section.group.end.parameters.tyml
      set: func-after-params

  annot-param-after-key:
    - include: skp-inline
    - match: ':'
      scope: punctuation.separator.type.annotation.tyml
      set: annot-param-type

  annot-param-type:
    - include: skp-inline
    - include: type-usage
    - match: '='
      scope: punctuation.separator.key-value.default.tyml
      set: param-default
    - match: '(?=,|\))'
      pop: true

  param-after-name:
    - include: skp-inline
    - match: ':'
      scope: punctuation.separator.type.annotation.tyml
      set: param-type

  param-type:
    - include: skp-inline
    - include: type-usage
    - match: '='
      scope: punctuation.separator.key-value.default.tyml
      set: param-default
    - match: '(?=,|\))'
      pop: true

  # カンマ/右括弧を先に判定してから expr を読む（取りこぼし防止）
  param-default:
    - include: skp-inline
    - match: '(?=,|\))'
      pop: true
    - include: expr

  func-after-params:
    - include: skp-inline

    # return type arrow
    - match: '->'
      scope: punctuation.separator.return-type.tyml
      push: return-type

    # function body
    - match: '{'
      scope: punctuation.section.block.begin.function.tyml
      set: func-body

  return-type:
    - include: skp-inline
    - include: type-usage
    - match: '(?={)'
      pop: true

  func-body:
    - meta_scope: meta.block.function.body.tyml
    - include: skp-line

    - match: '\breturn\b'
      scope: keyword.control.return.tyml
      push: return-expr

    - match: '{'
      scope: punctuation.section.block.begin.tyml
      push: object-literal

    - match: '\['
      scope: punctuation.section.brackets.begin.array.tyml
      push: array-literal

    - include: expr

    - match: '}'
      scope: punctuation.section.block.end.function.tyml
      pop: true

  return-expr:
    - include: skp-inline
    - include: expr
    - match: '(?=}|$)'
      pop: true

  # -----------------------------------------------------------------------
  #  type  -----------------------------------------------------------------
  # -----------------------------------------------------------------------
  type-decl:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.type.tyml
      set: type-after-name

  type-after-name:
    - include: skp-inline
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      set: type-body

  type-body:
    - meta_scope: meta.block.type.tyml
    - include: object-elements

  # -----------------------------------------------------------------------
  #  enum  -----------------------------------------------------------------
  # -----------------------------------------------------------------------
  enum-decl:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.type.enum.tyml
      set: enum-after-name

  enum-after-name:
    - include: skp-inline
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      set: enum-body

  enum-body:
    - meta_scope: meta.block.enum.tyml
    - include: skp-line

    - match: '"[^"\\]*(?:\\.[^"\\]*)*"'
      scope: string.quoted.double.enum.tyml

    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  Property / Value (schema) --------------------------------------------
  # -----------------------------------------------------------------------
  value-decl:
    - include: skp-inline
    - match: ':'
      scope: punctuation.separator.key-value.tyml
      set: type-spec

  # --- union / inline struct / attrs / default ---------------------------
  type-spec:
    - include: skp-inline

    # primitive types → 宣言と同じ色
    - match: '\b(int|string)\b'
      scope: entity.name.type.tyml

    # explicit type name segment → 宣言と同じ色
    - match: '{{ident}}'
      scope: entity.name.type.tyml

    # optional type suffix
    - match: '\?'
      scope: keyword.operator.optional.tyml

    # union operator
    - match: '\|'
      scope: keyword.operator.union.tyml

    # array type: [Type]
    - match: '\['
      scope: punctuation.section.brackets.begin.type.tyml
      push: array-type

    # inline struct
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      push: inline-struct

    # attribute list
    - match: '@'
      scope: keyword.operator.attribute.tyml
      push: attribute

    # default value
    - match: '='
      scope: punctuation.separator.key-value.default.tyml
      set: default-value

    # declaration terminator
    - match: '(?=,|\n|}|\))'
      pop: true

  # --- inline struct context ---------------------------------------------
  inline-struct:
    - meta_scope: meta.block.inline-struct.tyml
    - include: object-elements
    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # --- attribute chain ----------------------------------------------------
  attribute:
    - include: skp-inline

    - match: '\('
      scope: punctuation.section.group.begin.tyml

    - match: '\)'
      scope: punctuation.section.group.end.tyml

    - match: '(and|or)'
      scope: keyword.operator.logical.tyml

    - match: '(value|length|u8size|regex)'
      scope: keyword.operator.attribute.tyml

    - match: 'in'
      scope: keyword.other.attribute.tyml

    - match: '{{range_op}}'
      scope: keyword.operator.range.tyml

    - include: literals

    - match: '(?=@|=|,|\n|}|\))'
      pop: true

  # default value for schema
  default-value:
    - include: skp-inline
    - match: '(?=,|\n|}|\))'
      pop: true
    - include: expr

  # -----------------------------------------------------------------------
  #  Object elements (schema) ---------------------------------------------
  # -----------------------------------------------------------------------
  object-elements:
    - include: skp-line

    - match: '{{member_key}}(?=\s*:)'  # wildcard or ident
      scope: variable.other.member.tyml
      push: value-decl

    - match: ','
      scope: punctuation.separator.comma.tyml

    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  Type usage (for params / return types) --------------------------------
  # -----------------------------------------------------------------------
  type-usage:
    - include: skp-inline
    - match: '\b(int|string)\b'
      scope: entity.name.type.tyml
    - match: '{{ident}}'
      scope: entity.name.type.tyml
    - match: '\?'
      scope: keyword.operator.optional.tyml
    - match: '\|'
      scope: keyword.operator.union.tyml
    - match: '\['
      scope: punctuation.section.brackets.begin.type.tyml
      push: array-type

  array-type:
    - meta_scope: meta.type.array.tyml
    - include: skp-inline
    - match: '\b(int|string)\b'
      scope: entity.name.type.tyml
    - match: '{{ident}}'
      scope: entity.name.type.tyml
    - match: '\]'
      scope: punctuation.section.brackets.end.type.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  Expressions (for function bodies / defaults) -------------------------
  # -----------------------------------------------------------------------
  expr:
    - include: literals

    - match: '{{ident}}'
      scope: variable.other.readwrite.tyml

    - match: '{'
      scope: punctuation.section.block.begin.object.tyml
      push: object-literal

    - match: '\['
      scope: punctuation.section.brackets.begin.array.tyml
      push: array-literal

    - match: ','
      scope: punctuation.separator.comma.tyml

  array-literal:
    - meta_scope: meta.sequence.array.tyml
    - include: skp-inline
    - include: expr
    - match: '\]'
      scope: punctuation.section.brackets.end.array.tyml
      pop: true

  object-literal:
    - meta_scope: meta.mapping.object.tyml
    - include: skp-line

    - match: '{{ident}}(?=\s*=)'
      scope: variable.other.member.tyml
      push: obj-after-key

    - match: ','
      scope: punctuation.separator.comma.tyml

    - match: '}'
      scope: punctuation.section.block.end.object.tyml
      pop: true

  obj-after-key:
    - include: skp-inline
    - match: '='
      scope: punctuation.separator.key-value.assignment.tyml
      set: obj-value

  # カンマ/閉じカッコを先に見てから値式へ（取りこぼし防止）
  obj-value:
    - include: skp-inline
    - match: '(?=,|})'
      pop: true
    - include: expr

  # -----------------------------------------------------------------------
  #  Literals --------------------------------------------------------------
  # -----------------------------------------------------------------------
  literals:
    - match: "\"|'"
      scope: punctuation.definition.string.begin.tyml
      push: dq-string

    - match: '\b(true|false)\b'
      scope: constant.language.boolean.tyml

    - match: '{{number}}'
      scope: constant.numeric.integer.tyml

  dq-string:
    - meta_scope: string.quoted.double.tyml
    - match: "\"|'"
      scope: punctuation.definition.string.end.tyml
      pop: true

